{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Копия блокнота \"Keras tuner - автоматическая оптимизация гиперпараметров йронной сети\"","provenance":[{"file_id":"1A7yatYC_FPIXdqb6KZ7fIT6OL_-YziIJ","timestamp":1651733884551},{"file_id":"1m_8puwuGg9C7LWChv4YvZEmAlocGC7nG","timestamp":1650509615107},{"file_id":"1AE_W9QOLoFrPsoihVqZtY5YMWtrPr80C","timestamp":1565608167339},{"file_id":"1gDggUM7odQPBcaMm-6VgFFjjrXnyEBwO","timestamp":1556160902094},{"file_id":"19tpwsiCwWTOTGhwfCNtvYBBCqSXXF5A8","timestamp":1549969595565},{"file_id":"1QUcEJIQvqkOc3_WSr_dW2IZJztrnbhM8","timestamp":1546537506118},{"file_id":"1VeEeArZAekRLCx2AwZw1v9_FyA58gaaR","timestamp":1539495702856}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Ah7dy1kFL2H9"},"source":["# Оптимизация гиперпараметров нейросети с помощью Keras Tuner\n","\n","Чтобы запускать и редактировать код, сохраните копию этого ноутбука себе (File->Save a copy in Drive...). Свою копию вы сможете изменять и запускать.\n","\n","Не забудьте подключить GPU, чтобы сеть обучалась быстрее (Runtime -> Change Runtime Type -> Hardware Accelerator -> GPU).\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Om0LL5DEZfEo"},"source":["## Гиперпараметры обучения нейронной сети\n","\n","- Количество слоев нейронной сети\n","- Количество нейронов в каждом слое\n","- Функции активации, которые используются в слоях\n","- Тип оптимизатора при обучении нейронной сети\n","- Количество эпох обучения"]},{"cell_type":"markdown","metadata":{"id":"eVmxmhjuia9a"},"source":["## Установка Keras Tuner"]},{"cell_type":"code","metadata":{"id":"ftLg2Tt0Rejk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f463fbec-11d3-4650-facf-f0f8790699b6","executionInfo":{"status":"ok","timestamp":1651733988112,"user_tz":-300,"elapsed":5096,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["pip install -U keras-tuner"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras-tuner\n","  Downloading keras_tuner-1.1.2-py3-none-any.whl (133 kB)\n","\u001b[?25l\r\u001b[K     |██▌                             | 10 kB 22.9 MB/s eta 0:00:01\r\u001b[K     |█████                           | 20 kB 7.9 MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 30 kB 7.0 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 40 kB 6.5 MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 51 kB 4.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▊                 | 61 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 71 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▋            | 81 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 92 kB 4.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 102 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 112 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 122 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 133 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 133 kB 5.2 MB/s \n","\u001b[?25hRequirement already satisfied: tensorboard in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.8.0)\n","Collecting kt-legacy\n","  Downloading kt_legacy-1.0.4-py3-none-any.whl (9.6 kB)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (21.3)\n","Requirement already satisfied: ipython in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (5.5.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.21.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.23.0)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (2.6.1)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (5.1.1)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (4.8.0)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (4.4.2)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (57.4.0)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (0.7.5)\n","Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (0.8.1)\n","Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (1.0.18)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->keras-tuner) (0.2.5)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->keras-tuner) (1.15.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->keras-tuner) (3.0.8)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect->ipython->keras-tuner) (0.7.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2021.10.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (3.0.4)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.35.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.0.1)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (0.4.6)\n","Requirement already satisfied: protobuf>=3.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (3.17.3)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (0.6.1)\n","Requirement already satisfied: grpcio>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.44.0)\n","Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.0.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (3.3.6)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (0.37.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.8.1)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->keras-tuner) (4.2.4)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->keras-tuner) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->keras-tuner) (4.8)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard->keras-tuner) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard->keras-tuner) (4.11.3)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard->keras-tuner) (4.2.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard->keras-tuner) (3.8.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->keras-tuner) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard->keras-tuner) (3.2.0)\n","Installing collected packages: kt-legacy, keras-tuner\n","Successfully installed keras-tuner-1.1.2 kt-legacy-1.0.4\n"]}]},{"cell_type":"markdown","metadata":{"id":"TRs9p254BLSu"},"source":["## Подключаем нужные пакеты"]},{"cell_type":"code","metadata":{"id":"qrfd6FzSLrE2","executionInfo":{"status":"ok","timestamp":1651733991293,"user_tz":-300,"elapsed":3189,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ec3bcbd0-4b80-4a77-8064-899db02860bc"},"source":["%tensorflow_version 2.x\n","from tensorflow.keras.datasets import fashion_mnist\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras import utils\n","from tensorflow.keras.preprocessing import image\n","from google.colab import files\n","from kerastuner.tuners import RandomSearch, Hyperband, BayesianOptimization\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from PIL import Image\n","%matplotlib inline"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:8: DeprecationWarning: `import kerastuner` is deprecated, please use `import keras_tuner`.\n","  \n"]}]},{"cell_type":"markdown","metadata":{"id":"xiurjCBVMDTG"},"source":["## Подготовка данных для обучения сети"]},{"cell_type":"code","metadata":{"id":"E5L3LUIi8PDV","executionInfo":{"status":"ok","timestamp":1651733992531,"user_tz":-300,"elapsed":1250,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d71f187e-dac2-4e7d-89fc-5a327e01cd82"},"source":["(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","32768/29515 [=================================] - 0s 0us/step\n","40960/29515 [=========================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26427392/26421880 [==============================] - 0s 0us/step\n","26435584/26421880 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","16384/5148 [===============================================================================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4423680/4422102 [==============================] - 0s 0us/step\n","4431872/4422102 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","metadata":{"id":"6Z52YG_1kXbi","executionInfo":{"status":"ok","timestamp":1651733992531,"user_tz":-300,"elapsed":7,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["x_train = x_train.reshape(60000, 784)\n","x_test = x_test.reshape(10000, 784)\n","x_train = x_train / 255 \n","x_test = x_test / 255 \n","y_train = utils.to_categorical(y_train, 10)\n","y_test = utils.to_categorical(y_test, 10)"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["##Задаем функцию создания нейронной сети"],"metadata":{"id":"FSQLKTfUD-UF"}},{"cell_type":"code","source":["def build_model(hp):\n","    model = Sequential()\n","    model.add(Dense(units=hp.Int('units_input',\n","                                   min_value=128,\n","                                   max_value=1024,\n","                                   step=32),\n","                    input_dim=784,\n","                    activation='relu'))\n","    model.add(Dense(10, activation='softmax'))\n","    model.compile(\n","        optimizer='SGD',\n","        loss='categorical_crossentropy',\n","        metrics=['accuracy'])\n","    return model"],"metadata":{"id":"RLhIEKV1EP1q","executionInfo":{"status":"ok","timestamp":1651733992895,"user_tz":-300,"elapsed":370,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["##Создаём тюнер\n","\n","Доступные типы тюнеров: \n","- RandomSearch - случайный поиск.\n","- Hyperband - алгоритм оптимизации на основе многорукого бандита, Li, Lisha, and Kevin Jamieson. [\"Hyperband: A Novel Bandit-Based Approach to Hyperparameter Optimization.\"Journal of Machine Learning Research 18 (2018): 1-52](http://jmlr.org/papers/v18/16-558.html).\n","- BayesianOptimization - [байесовская оптимизация](https://en.wikipedia.org/wiki/Bayesian_optimization)."],"metadata":{"id":"ldKgZ0v7Ihhy"}},{"cell_type":"code","source":["tuner = RandomSearch(\n","    build_model,                 # функция создания модели\n","    objective='val_accuracy',    # метрика, которую нужно оптимизировать - \n","                                 # доля правильных ответов на проверочном наборе данных\n","    max_trials=10,               # максимальное количество запусков обучения \n","    directory='test_directory'   # каталог, куда сохраняются обученные сети  \n","    )"],"metadata":{"id":"n6WQQ-WbI_Ox","executionInfo":{"status":"ok","timestamp":1651733996114,"user_tz":-300,"elapsed":3223,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["##Запускаем подбор гиперпараметров\n","\n","Пространство поиска"],"metadata":{"id":"-kUHlzYTMa2w"}},{"cell_type":"code","source":["tuner.search_space_summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Toi7jMYLMmOW","executionInfo":{"status":"ok","timestamp":1651733996680,"user_tz":-300,"elapsed":571,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"c679e2e2-61e6-4aaa-bf62-62df74815ed8"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Search space summary\n","Default search space size: 1\n","units_input (Int)\n","{'default': None, 'conditions': [], 'min_value': 128, 'max_value': 1024, 'step': 32, 'sampling': None}\n"]}]},{"cell_type":"markdown","source":["Подбор гиперпараметров"],"metadata":{"id":"zE3ZaMwMM1zB"}},{"cell_type":"code","source":["tuner.search(x_train,                  # Данные для обучения\n","             y_train,                  # Правильные ответы\n","             batch_size=256,           # Размер мини-выборки\n","             epochs=3,                 # Количество эпох обучения \n","             validation_split=0.2,\n","             verbose=1,\n","             )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yvY8AZxgM-2Z","executionInfo":{"status":"ok","timestamp":1651734052334,"user_tz":-300,"elapsed":55659,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"df89d253-702f-4005-fc22-11d7e4947e9e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 10 Complete [00h 00m 05s]\n","val_accuracy: 0.7790833115577698\n","\n","Best val_accuracy So Far: 0.7918333411216736\n","Total elapsed time: 00h 00m 55s\n","INFO:tensorflow:Oracle triggered exit\n"]}]},{"cell_type":"markdown","source":["##Выбираем 3 лучших модели"],"metadata":{"id":"5EogoTiEpuH7"}},{"cell_type":"code","source":["tuner.results_summary(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qh55mT7Ap37D","executionInfo":{"status":"ok","timestamp":1651734052336,"user_tz":-300,"elapsed":13,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"d53ba715-b36a-4f32-bd3f-b71a6f16b6a5"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Results summary\n","Results in test_directory/untitled_project\n","Showing 3 best trials\n","<keras_tuner.engine.objective.Objective object at 0x7f79243d9590>\n","Trial summary\n","Hyperparameters:\n","units_input: 896\n","Score: 0.7918333411216736\n","Trial summary\n","Hyperparameters:\n","units_input: 672\n","Score: 0.7872499823570251\n","Trial summary\n","Hyperparameters:\n","units_input: 768\n","Score: 0.7857499718666077\n"]}]},{"cell_type":"markdown","source":["Получаем три лучших модели"],"metadata":{"id":"K0x8I14IrhOR"}},{"cell_type":"code","source":["models = tuner.get_best_models(num_models=3)"],"metadata":{"id":"R27NO6lcrL3K","executionInfo":{"status":"ok","timestamp":1651734052796,"user_tz":-300,"elapsed":469,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["Оцениваем качество выбранных моделей на тестовых данных"],"metadata":{"id":"pv8rVANnrypB"}},{"cell_type":"code","source":["for model in models:\n","  model.summary()\n","  model.evaluate(x_test, y_test)\n","  print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6mLZvGYr-Lg","executionInfo":{"status":"ok","timestamp":1651734056904,"user_tz":-300,"elapsed":4117,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"fdd6cd2f-f895-4abc-a5be-aa1f4bfb918c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 896)               703360    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                8970      \n","                                                                 \n","=================================================================\n","Total params: 712,330\n","Trainable params: 712,330\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6848 - accuracy: 0.7785\n","\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 672)               527520    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                6730      \n","                                                                 \n","=================================================================\n","Total params: 534,250\n","Trainable params: 534,250\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6985 - accuracy: 0.7726\n","\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 768)               602880    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                7690      \n","                                                                 \n","=================================================================\n","Total params: 610,570\n","Trainable params: 610,570\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6980 - accuracy: 0.7747\n","\n"]}]},{"cell_type":"markdown","source":["##Улучшим функцию подбора гиперпараметров\n","\n","Добавим один скрытый слой"],"metadata":{"id":"t5O_tueytEmm"}},{"cell_type":"code","source":["def build_model_1(hp):\n","    model = Sequential() \n","    model.add(Dense(units=hp.Int('units_input',    # Полносвязный слой с разным количеством нейронов\n","                                   min_value=512,    # минимальное количество нейронов - 512\n","                                   max_value=1024,   # максимальное количество - 1024\n","                                   step=32),\n","                    input_dim=784,\n","                    activation='relu'))\n","    model.add(Dense(units=hp.Int('units_hidden',        \n","                                   min_value=128,   \n","                                   max_value=600,   \n","                                   step=32),\n","                    activation='relu'))   \n","    model.add(Dense(10, activation='softmax'))\n","    model.compile(\n","        optimizer='SGD',\n","        loss='categorical_crossentropy',\n","        metrics=['accuracy'])\n","    return model"],"metadata":{"id":"BQfk246stfg8","executionInfo":{"status":"ok","timestamp":1651734056905,"user_tz":-300,"elapsed":15,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["##Создаём тюнер"],"metadata":{"id":"8yzrIqTcuLAm"}},{"cell_type":"markdown","metadata":{"id":"rpEltSGUkJAG"},"source":["## Задаем функцию создания нейронной сети"]},{"cell_type":"code","source":["tuner = BayesianOptimization(\n","    build_model_1,\n","    objective='val_accuracy',\n","    max_trials=10,\n","    directory='test_directory_1'\n",")"],"metadata":{"id":"bLJ2yN_2uTVv","executionInfo":{"status":"ok","timestamp":1651734056906,"user_tz":-300,"elapsed":14,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["##Запускаем подбор гиперпараметров\n","\n","Пространство поиска"],"metadata":{"id":"z9YRACxTvTB1"}},{"cell_type":"code","source":["tuner.search_space_summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pr2ZVacQvcgL","executionInfo":{"status":"ok","timestamp":1651734056906,"user_tz":-300,"elapsed":12,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"299657bd-5fb5-4e8e-d91f-73d735e6c529"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Search space summary\n","Default search space size: 2\n","units_input (Int)\n","{'default': None, 'conditions': [], 'min_value': 512, 'max_value': 1024, 'step': 32, 'sampling': None}\n","units_hidden (Int)\n","{'default': None, 'conditions': [], 'min_value': 128, 'max_value': 600, 'step': 32, 'sampling': None}\n"]}]},{"cell_type":"markdown","source":["Подбор гиперпараметров"],"metadata":{"id":"rChl9wDSvq0B"}},{"cell_type":"code","source":["tuner.search(\n","    x_train,\n","    y_train,\n","    batch_size=256,\n","    epochs=3,\n","    validation_split=0.2,\n","    verbose=1,\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p3V_Fu_8vwsE","executionInfo":{"status":"ok","timestamp":1651734121536,"user_tz":-300,"elapsed":64637,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"f1a18f44-459b-4513-b8e8-63a0105201c5"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 10 Complete [00h 00m 04s]\n","val_accuracy: 0.79666668176651\n","\n","Best val_accuracy So Far: 0.8011666536331177\n","Total elapsed time: 00h 01m 04s\n","INFO:tensorflow:Oracle triggered exit\n"]}]},{"cell_type":"markdown","source":["Получим три лучших модели"],"metadata":{"id":"oUkPNDAgxA_H"}},{"cell_type":"code","source":["models_1 = tuner.get_best_models(num_models=3)"],"metadata":{"id":"COazS5GnxHHz","executionInfo":{"status":"ok","timestamp":1651734122159,"user_tz":-300,"elapsed":629,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["Оцениваем качество модели на тестовых данных"],"metadata":{"id":"neQpGvh-xUOE"}},{"cell_type":"code","source":["for model_1 in models_1:\n","  model.summary()\n","  model.evaluate(x_test, y_test)\n","  print"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OVpVurMLxbjE","executionInfo":{"status":"ok","timestamp":1651734125930,"user_tz":-300,"elapsed":3777,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"98ecd7dc-bac3-426d-935c-a9544e19a44c"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 768)               602880    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                7690      \n","                                                                 \n","=================================================================\n","Total params: 610,570\n","Trainable params: 610,570\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6980 - accuracy: 0.7747\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 768)               602880    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                7690      \n","                                                                 \n","=================================================================\n","Total params: 610,570\n","Trainable params: 610,570\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6980 - accuracy: 0.7747\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 768)               602880    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                7690      \n","                                                                 \n","=================================================================\n","Total params: 610,570\n","Trainable params: 610,570\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6980 - accuracy: 0.7747\n"]}]},{"cell_type":"markdown","source":["##Задаём функцию нейронной сети"],"metadata":{"id":"9bZgZRSkvSoz"}},{"cell_type":"code","metadata":{"id":"Sd62W3GOQtKU","executionInfo":{"status":"ok","timestamp":1651734125931,"user_tz":-300,"elapsed":10,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["def build_model_2(hp):\n","    model = Sequential()\n","    activation_choice = hp.Choice('activation', values=['relu', 'sigmoid', 'tanh', 'elu', 'selu'])    \n","    model.add(Dense(units=hp.Int('units_input',    # Полносвязный слой с разным количеством нейронов\n","                                   min_value=512,    # минимальное количество нейронов - 128\n","                                   max_value=1024,   # максимальное количество - 1024\n","                                   step=32),\n","                    input_dim=784,\n","                    activation=activation_choice))\n","    model.add(Dense(units=hp.Int('units_hidden',        \n","                                   min_value=128,   \n","                                   max_value=600,   \n","                                   step=32),\n","                    activation=activation_choice))   \n","    model.add(Dense(10, activation='softmax'))\n","    model.compile(\n","        optimizer=hp.Choice('optimizer', values=['adam','rmsprop','SGD']),\n","        loss='categorical_crossentropy',\n","        metrics=['accuracy'])\n","    return model"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lFw-0sZsmFOJ"},"source":["## Создаем tuner\n","\n","Доступные типы тюнеров: \n","- RandomSearch - случайный поиск.\n","- Hyperband - алгоритм оптимизации на основе многорукого бандита, Li, Lisha, and Kevin Jamieson. [\"Hyperband: A Novel Bandit-Based Approach to Hyperparameter Optimization.\"Journal of Machine Learning Research 18 (2018): 1-52](http://jmlr.org/papers/v18/16-558.html).\n","- BayesianOptimization - [байесовская оптимизация](https://en.wikipedia.org/wiki/Bayesian_optimization)."]},{"cell_type":"code","metadata":{"id":"OZwA47cOQz4b","executionInfo":{"status":"ok","timestamp":1651734126383,"user_tz":-300,"elapsed":460,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["tuner = BayesianOptimization(\n","    build_model_2,                 # функция создания модели\n","    objective='val_accuracy',    # метрика, которую нужно оптимизировать - \n","                                 # доля правильных ответов на проверочном наборе данных\n","    max_trials=80,               # максимальное количество запусков обучения \n","    directory='test_directory_2'   # каталог, куда сохраняются обученные сети  \n","    )"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-znOiwDZB1C5"},"source":["## Запускаем подбор гиперпараметров"]},{"cell_type":"markdown","metadata":{"id":"63MVEBFYmdpB"},"source":["Пространство поиска"]},{"cell_type":"code","metadata":{"id":"JeJ87qoVB4PV","colab":{"base_uri":"https://localhost:8080/"},"outputId":"821972c0-333c-4267-9014-c06ade51f937","executionInfo":{"status":"ok","timestamp":1651734126384,"user_tz":-300,"elapsed":11,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["tuner.search_space_summary()"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Search space summary\n","Default search space size: 4\n","activation (Choice)\n","{'default': 'relu', 'conditions': [], 'values': ['relu', 'sigmoid', 'tanh', 'elu', 'selu'], 'ordered': False}\n","units_input (Int)\n","{'default': None, 'conditions': [], 'min_value': 512, 'max_value': 1024, 'step': 32, 'sampling': None}\n","units_hidden (Int)\n","{'default': None, 'conditions': [], 'min_value': 128, 'max_value': 600, 'step': 32, 'sampling': None}\n","optimizer (Choice)\n","{'default': 'adam', 'conditions': [], 'values': ['adam', 'rmsprop', 'SGD'], 'ordered': False}\n"]}]},{"cell_type":"markdown","metadata":{"id":"EfT4ecI8n5Ga"},"source":["Подбор гиперпараметров"]},{"cell_type":"code","metadata":{"id":"NEFHVKDBB-Z9","outputId":"8f735fb5-6ffe-47cc-98d6-859d43da8a7e","executionInfo":{"status":"ok","timestamp":1651734908711,"user_tz":-300,"elapsed":782335,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["tuner.search(x_train,                  # Данные для обучения\n","             y_train,                  # Правильные ответы\n","             batch_size=256,           # Размер мини-выборки\n","             epochs=3,                # Количество эпох обучения \n","             validation_split=0.2,     # Часть данных, которая будет использоваться для проверки\n","             )"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 80 Complete [00h 00m 05s]\n","val_accuracy: 0.8812500238418579\n","\n","Best val_accuracy So Far: 0.8829166889190674\n","Total elapsed time: 00h 13m 02s\n","INFO:tensorflow:Oracle triggered exit\n"]}]},{"cell_type":"markdown","metadata":{"id":"KlPTC0r3pLyB"},"source":["## Выбираем лучшую модель"]},{"cell_type":"code","metadata":{"id":"i1TDBMF6ORNW","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e7f0bbad-cd91-4c6c-ef79-16d3505a6670","executionInfo":{"status":"ok","timestamp":1651734908712,"user_tz":-300,"elapsed":20,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["tuner.results_summary()"],"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Results summary\n","Results in test_directory_2/untitled_project\n","Showing 10 best trials\n","<keras_tuner.engine.objective.Objective object at 0x7f79200fae90>\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8829166889190674\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8812500238418579\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8799166679382324\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8796666860580444\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8794166445732117\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8790833353996277\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8790000081062317\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8790000081062317\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8789166808128357\n","Trial summary\n","Hyperparameters:\n","activation: relu\n","units_input: 1024\n","units_hidden: 128\n","optimizer: adam\n","Score: 0.8789166808128357\n"]}]},{"cell_type":"markdown","metadata":{"id":"_it8FZ8epSue"},"source":["Получаем три лучших модели"]},{"cell_type":"code","metadata":{"id":"31_zCfjqQVL6","executionInfo":{"status":"ok","timestamp":1651734909573,"user_tz":-300,"elapsed":872,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["models_2 = tuner.get_best_models(num_models=3)"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Oje7bSQppVkF"},"source":["Оцениваем качество модели на тестовых данных"]},{"cell_type":"code","metadata":{"id":"CUoo7iM-bBht","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a2d5a619-c9b4-430c-f0eb-e10339fddf3b","executionInfo":{"status":"ok","timestamp":1651734913488,"user_tz":-300,"elapsed":3925,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"source":["for model_2 in models_2:\n","  model.summary()\n","  model.evaluate(x_test, y_test)\n","  print() "],"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 768)               602880    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                7690      \n","                                                                 \n","=================================================================\n","Total params: 610,570\n","Trainable params: 610,570\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6980 - accuracy: 0.7747\n","\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 768)               602880    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                7690      \n","                                                                 \n","=================================================================\n","Total params: 610,570\n","Trainable params: 610,570\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6980 - accuracy: 0.7747\n","\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 768)               602880    \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                7690      \n","                                                                 \n","=================================================================\n","Total params: 610,570\n","Trainable params: 610,570\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.6980 - accuracy: 0.7747\n","\n"]}]},{"cell_type":"markdown","source":["##Сделаем количество слоёв гиперпараметром"],"metadata":{"id":"cpT-Xf3620dC"}},{"cell_type":"code","source":["def build_model_3(hp):\n","    model = Sequential()\n","    activation_choice = hp.Choice('activation', values=['relu', 'sigmoid', 'tanh', 'elu', 'selu'])    \n","    model.add(Dense(units=hp.Int('units_input',    # Полносвязный слой с разным количеством нейронов\n","                                   min_value=512,    # минимальное количество нейронов - 128\n","                                   max_value=1024,   # максимальное количество - 1024\n","                                   step=32),\n","                    input_dim=784,\n","                    activation=activation_choice))\n","    for i in range(hp.Int('num_layers', 2, 5)):\n","      model.add(Dense(units=hp.Int('units_' + str(i),\n","                                          min_value=128,\n","                                          max_value=1024,\n","                                          step=32),\n","                             activation='relu'))  \n","    model.add(Dense(10, activation='softmax'))\n","    model.compile(\n","        optimizer=hp.Choice('optimizer', values=['adam','rmsprop','SGD']),\n","        loss='categorical_crossentropy',\n","        metrics=['accuracy'])\n","    return model"],"metadata":{"id":"e_wRgB6q3S76","executionInfo":{"status":"ok","timestamp":1651735282892,"user_tz":-300,"elapsed":428,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["## Создаем тюнер"],"metadata":{"id":"V-t684y6FUaI"}},{"cell_type":"code","source":["tuner = BayesianOptimization(\n","    build_model_3,                 # функция создания модели\n","    objective='val_accuracy',    # метрика, которую нужно оптимизировать - \n","                                 # доля правильных ответов на проверочном наборе данных\n","    max_trials=40,               # максимальное количество запусков обучения \n","    directory='test_directory_3'   # каталог, куда сохраняются обученные сети  \n","    )"],"metadata":{"id":"B9ZLO5j7FXm0","executionInfo":{"status":"ok","timestamp":1651735285446,"user_tz":-300,"elapsed":5,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["## Запускаем подбор гиперпараметров"],"metadata":{"id":"0vxhqmYAFu7p"}},{"cell_type":"markdown","source":["Пространство поиска"],"metadata":{"id":"n2QayNe5FyKj"}},{"cell_type":"code","source":["tuner.search_space_summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uqosw6IYF3cr","executionInfo":{"status":"ok","timestamp":1651735290853,"user_tz":-300,"elapsed":6,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"cb50636d-6d7f-4ab8-ad25-cc88a7e446a0"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Search space summary\n","Default search space size: 6\n","activation (Choice)\n","{'default': 'relu', 'conditions': [], 'values': ['relu', 'sigmoid', 'tanh', 'elu', 'selu'], 'ordered': False}\n","units_input (Int)\n","{'default': None, 'conditions': [], 'min_value': 512, 'max_value': 1024, 'step': 32, 'sampling': None}\n","num_layers (Int)\n","{'default': None, 'conditions': [], 'min_value': 2, 'max_value': 5, 'step': 1, 'sampling': None}\n","units_0 (Int)\n","{'default': None, 'conditions': [], 'min_value': 128, 'max_value': 1024, 'step': 32, 'sampling': None}\n","units_1 (Int)\n","{'default': None, 'conditions': [], 'min_value': 128, 'max_value': 1024, 'step': 32, 'sampling': None}\n","optimizer (Choice)\n","{'default': 'adam', 'conditions': [], 'values': ['adam', 'rmsprop', 'SGD'], 'ordered': False}\n"]}]},{"cell_type":"markdown","source":["Подбор гиперпараметров"],"metadata":{"id":"Icr4i0TLGQPH"}},{"cell_type":"code","source":["tuner.search(x_train,                  # Данные для обучения\n","             y_train,                  # Правильные ответы\n","             batch_size=256,           # Размер мини-выборки\n","             epochs=3,                # Количество эпох обучения \n","             validation_split=0.2,     # Часть данных, которая будет использоваться для проверки\n","             )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VX4gqj0RGT2D","executionInfo":{"status":"ok","timestamp":1651735951941,"user_tz":-300,"elapsed":602264,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"ee0dbcc7-f393-4732-8a90-738c16d7d54b"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 40 Complete [00h 00m 06s]\n","val_accuracy: 0.8788333535194397\n","\n","Best val_accuracy So Far: 0.8813333511352539\n","Total elapsed time: 00h 10m 02s\n","INFO:tensorflow:Oracle triggered exit\n"]}]},{"cell_type":"markdown","source":["## Выбираем лучшую модель"],"metadata":{"id":"wVifdx7SGe5e"}},{"cell_type":"code","source":["tuner.results_summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4x1dKGMxGhoF","executionInfo":{"status":"ok","timestamp":1651735961444,"user_tz":-300,"elapsed":297,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"2c839099-9429-4fc4-ad21-a4648dae60b2"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Results summary\n","Results in test_directory_3/untitled_project\n","Showing 10 best trials\n","<keras_tuner.engine.objective.Objective object at 0x7f78a5f61290>\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 960\n","num_layers: 2\n","units_0: 1024\n","units_1: 288\n","optimizer: adam\n","units_2: 1024\n","units_3: 192\n","units_4: 128\n","Score: 0.8813333511352539\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 544\n","num_layers: 2\n","units_0: 800\n","units_1: 416\n","optimizer: adam\n","units_2: 320\n","Score: 0.8804166913032532\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 512\n","num_layers: 2\n","units_0: 1024\n","units_1: 1024\n","optimizer: adam\n","units_2: 1024\n","Score: 0.8794999718666077\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 512\n","num_layers: 2\n","units_0: 1024\n","units_1: 896\n","optimizer: adam\n","units_2: 448\n","units_3: 1024\n","units_4: 832\n","Score: 0.8790000081062317\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 512\n","num_layers: 2\n","units_0: 1024\n","units_1: 800\n","optimizer: adam\n","units_2: 128\n","units_3: 128\n","units_4: 128\n","Score: 0.8788333535194397\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 512\n","num_layers: 2\n","units_0: 1024\n","units_1: 128\n","optimizer: adam\n","units_2: 1024\n","units_3: 1024\n","units_4: 128\n","Score: 0.8784166574478149\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 512\n","num_layers: 2\n","units_0: 1024\n","units_1: 128\n","optimizer: adam\n","units_2: 128\n","units_3: 1024\n","units_4: 128\n","Score: 0.878250002861023\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 1024\n","num_layers: 2\n","units_0: 1024\n","units_1: 1024\n","optimizer: adam\n","units_2: 1024\n","units_3: 1024\n","units_4: 128\n","Score: 0.8775833249092102\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 1024\n","num_layers: 2\n","units_0: 1024\n","units_1: 1024\n","optimizer: adam\n","units_2: 352\n","units_3: 224\n","units_4: 128\n","Score: 0.8759999871253967\n","Trial summary\n","Hyperparameters:\n","activation: selu\n","units_input: 1024\n","num_layers: 2\n","units_0: 1024\n","units_1: 1024\n","optimizer: adam\n","units_2: 128\n","units_3: 1024\n","units_4: 128\n","Score: 0.8757500052452087\n"]}]},{"cell_type":"markdown","source":["Получаем три лучших модели"],"metadata":{"id":"GqpEBQnTGiWr"}},{"cell_type":"code","source":["models_3 = tuner.get_best_models(num_models=3)"],"metadata":{"id":"JGWlgzKBGkn3","executionInfo":{"status":"ok","timestamp":1651736018812,"user_tz":-300,"elapsed":846,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["Оцениваем качество модели на тестовых данных"],"metadata":{"id":"6Yxgne9xGnhT"}},{"cell_type":"code","source":["for model_3 in models_3:\n","  model_3.summary()\n","  model_3.evaluate(x_test, y_test)\n","  print() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1WT396bBGvRK","executionInfo":{"status":"ok","timestamp":1651736104437,"user_tz":-300,"elapsed":4658,"user":{"displayName":"Dimyasha Murrr","userId":"10253758352263353981"}},"outputId":"4dee9bff-97a0-43fe-bc2d-3e4987eebc96"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 960)               753600    \n","                                                                 \n"," dense_1 (Dense)             (None, 1024)              984064    \n","                                                                 \n"," dense_2 (Dense)             (None, 288)               295200    \n","                                                                 \n"," dense_3 (Dense)             (None, 10)                2890      \n","                                                                 \n","=================================================================\n","Total params: 2,035,754\n","Trainable params: 2,035,754\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 4ms/step - loss: 0.3541 - accuracy: 0.8680\n","\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 544)               427040    \n","                                                                 \n"," dense_1 (Dense)             (None, 800)               436000    \n","                                                                 \n"," dense_2 (Dense)             (None, 416)               333216    \n","                                                                 \n"," dense_3 (Dense)             (None, 10)                4170      \n","                                                                 \n","=================================================================\n","Total params: 1,200,426\n","Trainable params: 1,200,426\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 3ms/step - loss: 0.3564 - accuracy: 0.8733\n","\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 512)               401920    \n","                                                                 \n"," dense_1 (Dense)             (None, 1024)              525312    \n","                                                                 \n"," dense_2 (Dense)             (None, 1024)              1049600   \n","                                                                 \n"," dense_3 (Dense)             (None, 10)                10250     \n","                                                                 \n","=================================================================\n","Total params: 1,987,082\n","Trainable params: 1,987,082\n","Non-trainable params: 0\n","_________________________________________________________________\n","313/313 [==============================] - 1s 4ms/step - loss: 0.3474 - accuracy: 0.8756\n","\n"]}]}]}